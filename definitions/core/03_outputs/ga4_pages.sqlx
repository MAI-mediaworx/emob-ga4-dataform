config {
    type: "incremental",
    tags: [dataform.projectConfig.vars.GA4_DATASET, "pages", "prod"],
    database: dataform.projectConfig.vars.OUTPUT_PROJECT,
    schema: dataform.projectConfig.vars.TRANSFORMATIONS_DATASET,
    description: "Table containing all captured page views",
    bigquery: {
        partitionBy: "event_date", // To improve query performance and control costs. You can only partition based on one dimension.
        clusterBy: ["event_date", "page_id"]
    }
}

js {
    const {
        helpers
    } = require("includes/core/helpers");
    const config = helpers.getConfig();
    /* check if there's invalid columns or dupe columns in the custom column definitions */
    helpers.checkColumnNames(config);
}

  -- ==============================
  --        PRE-OPERATIONS
  -- ==============================
  -- Note that pre_operations blocks will only work via the "Start Execution" button and not via the "Run" button

pre_operations {
  declare date_checkpoint DATE
  ---
  set date_checkpoint = (
    ${when(incremental(),
      `select
        coalesce(max(event_date)+1, date('${config.GA4_START_DATE}'))
      from ${self()}
      where is_final = true`,
    `select date('${config.GA4_START_DATE}')`)}   /* the default, when it's not incremental */
  );
    -- delete some older data, since this may be updated later by GA4
  ${
    when(incremental(),
      `delete from ${self()} where event_date >= date_checkpoint`
      )
  }
}

  -- ==============================
  --            QUERY
  -- ==============================
with query_source as (
SELECT
  property_id,
  stream_id,
  event_date,
  -- create page ID
  farm_fingerprint(
    event_date ||
    -- coalesce(user_pseudo_id, 'no') ||
    -- coalesce(event_params.ga_session_id, 0) ||
    -- coalesce(batch.batch_page_id, 0) ||
    -- coalesce(batch.batch_ordering_id,0) ||
    -- coalesce(batch.batch_event_index,0) ||
    coalesce(page.location, "")
) as page_id,

  -- first
  ${helpers.generateArrayAggSQL('device')},
  ${helpers.generateArrayAggSQL('geo')},
  ${helpers.generateArrayAggSQL('app_info')},
  ${helpers.generateArrayAggSQL('platform')},
  ${helpers.generateArrayAggSQL('session_traffic_source_last_click', 'session_traffic_source_last_click')},

  CASE
    WHEN REGEXP_CONTAINS(page.path, r'\/da\/|\/de\/|\/en\/|\/es\/|\/fi\/|\/fr\/|\/it\/|\/nl\/|\/no\/|\/pt\/|\/sv\/') THEN RIGHT(REGEXP_REPLACE(regexp_replace(page.path, r'^https?://[^/]+', ''),r'[\?#].*',''), LENGTH(REGEXP_REPLACE(regexp_replace(page.path, r'^https?://[^/]+', ''),r'[\?#].*',''))-3)
    ELSE REGEXP_REPLACE(regexp_replace(page.path,
      r'^https?://[^/]+',
      ''),r'[\?#].*','')
    END
  AS page_path_cleaned,
  STRUCT( ${helpers.generateArrayAggSQL('page.location', 'page_location')},
    ${helpers.generateArrayAggSQL('page.path', 'page_path')},
    ${helpers.generateArrayAggSQL('page.title', 'page_title')},
    ${helpers.generateArrayAggSQL('page.hostname', 'page_hostname')},
    ${helpers.generateArrayAggSQL('page.referrer', 'page_referrer')},
    ${helpers.generateArrayAggSQL('page.content_group', 'content_group')},
    ${helpers.generateArrayAggSQL('page.content_id', 'content_id')},
    ${helpers.generateArrayAggSQL('page.content_type', 'content_type')}
     ) 
    AS page,


  -- METRICS

  COUNT(DISTINCT session_id) sessions,
  COUNT(DISTINCT engaged_session_id) engaged_sessions,
  COUNT(*) pageviews,
  SUM(entrances) entrances,
  SUM(exits) exits,
  COUNT(DISTINCT user.user_pseudo_id) users,
  COUNT(DISTINCT IF(user.user_type="new user", user.user_pseudo_id, NULL)) as new_users,
  COUNT(DISTINCT IF(user.user_type="returning user", user.user_pseudo_id, NULL)) as returning_users,
  COUNT(DISTINCT IF(user.is_active_user , user.user_pseudo_id, NULL)) as active_users,
  ROUND(SUM(time_on_page_seconds), 2) AS total_time_on_page_sec,
  ROUND(AVG(time_on_page_seconds), 2) AS avg_time_on_page_sec,
  ROUND(SUM(engagement_time_msec)/1000, 2) AS total_engagement_time_sec,
  ROUND(AVG(engagement_time_msec)/1000, 2) AS avg_engagement_time_sec,

  MIN(is_final) AS is_final,            --return false if even 1 event is not final
FROM
  ${ref("ga4_pageviews")}
WHERE  event_date >= date_checkpoint 
-- only hits with user_pseudo_id and session_id
  -- and user.user_pseudo_id is not null
  -- and session_id is not null
  group by all
)


select * 
from query_source


